)
}
ui <- fluidPage(
useShinyjs(),
click_to_show_UI("test")
) # close fluidPage
server <- function(input, output, session) {
callModule(test, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
current_alg_data <- LONDresult$LONDres()
data_to_plot <- eventReactive(input$compare, {
current_alg_data <- LONDresult$LONDres()
select_alg_rx <- reactive({
out <- select_alg(alg = input$alg, data = data())
})
select_alg_data <- select_alg_rx()
data_to_plot <- cbind(current_alg_data, select_alg_data$alphai) %>%
mutate(index = row_number(),
LOND = log(alphai),
!!rlang::quo_name(input$alg) := log(select_alg_data$alphai),
Bonferroni = log(0.05/index),
Unadjusted = rep(log(0.05), nrow(.))) %>%
pivot_longer(cols = c(LOND, !!rlang::quo_name(input$alg), Bonferroni, Unadjusted),
names_to = "adjustment",
values_to = "alpha")
})
current_alg_data <- LONDresult$LONDres()
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
?knit
?markdown::markdownToHTML
library(markdown)
knit("src/LOND_code.Rmd")
knit("/src/LOND_code.Rmd")
knit("LOND_code.Rmd")
knit("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_page.R")
knit("./src/LOND_page.R")
markdown::markdownToHTML(knit("./src/LOND_code.Rmd"))
knit("./src/LOND_page.R")
markdown::markdownToHTML(knit("./src/LOND_code.Rmd"))
library(rmarkdown)
source("ui.R")
rmardown::render("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
rmarkdown::render("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
rmarkdown::render("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
renv::snapshot()
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(rmarkdown)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?includeHTML
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
knit("./src/LORD_code.Rmd")
knit("./src/LORD_code.Rmd")
saved = help_console(LOND, "html", before = "", after = "")
source("./src/utils.R")
source("utils.R")
source("ui.R")
saved = help_console(LOND, "html", before = "", after = "")
knit("./src/LORD_code.Rmd")
knit("LORD_code.Rmd")
knit("/srcLORD_code.Rmd")
knit("/src/LORD_code.Rmd")
knit("./src/LORD_code.Rmd")
source("ui.R")
source("utils.R")
library(knitr)
library(onlineFDR)
saved = help_console(LOND, "html", before = "", after = "")
knit("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
knit("./src/LOND_code.Rmd")
source("ui.R")
?knit
knit("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
knit("/onlineFDRShiny/src/LOND_code.Rmd")
knit("./src/LOND_code.Rmd")
HTML(markdown::markdownToHTML(knit("./src/LORD_code.Rmd", quiet = T)))
knit("./src/LOND_code.Rmd")
markdown::markdownToHTML(knit("./src/LORD_code.Rmd", quiet = T))
knit("./src/LOND_code.Rmd", quiet = T)
?knit
rmarkdown::render("./src/LORD_code.Rmd", "html_document")
rmarkdown::render("./src/LOND_code.Rmd", "html_document")
?markdownToHTML
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(rmarkdown)
library(markdown)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?startAnim
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(rmarkdown)
library(markdown)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
?showNotification
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
?reactive
source("ui.R")
source("server.R")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp()
source("ui.R")
source("server.R")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
source("ui.R")
source("server.R")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
source("ui.R")
source("server.R")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(rmarkdown)
library(markdown)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
# library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
source("ui.R")
source("server.R")
runApp()
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
is.null(a)
is.null(datacheck)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?is.reactive
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?isolate
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
install.packages("shinythemes")
renv::snapshot()
renv::snapshot()
