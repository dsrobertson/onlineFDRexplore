shiny::runApp()
runApp()
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny")
renv::snapshot()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactiveValues
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(mtcars)
mtcars %>%
summarize(across(class))
sapply(iris, class)
mtcars %>%
summarize(across(everything(), class))
mtcars %>%
summarize(across(everything(), class)) %>%
pivot_longer()
mtcars %>%
summarize(across(everything(), class)) %>%
pivot_longer(names_to = "variable", values_to = "type")
mtcars %>%
summarize(across(everything(), class)) %>%
pivot_longer(everything(), names_to = "variable", values_to = "type")
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR")
install.packages("progress")
renv::snapshot()
BatchBH <- function(d, alpha = 0.05, gammai, display_progress = FALSE){
d <- checkPval(d)
if (!is.data.frame(d)) {
stop("d must be a dataframe")
} else if (!("batch" %in% colnames(d))) {
stop("d needs to have a column called batch")
}
if (alpha < 0 || alpha > 1) {
stop("alpha must be between 0 and 1.")
}
if(!is.numeric(d$batch)) {
stop("Check that your batch labels are numeric values.")
}
#check that batches were labeled correctly
if(is.unsorted(d$batch)) {
d <- d[order(d$batch),]
warning("Batches were re-ordered in increasing numeric value.")
}
n_batch <- length(unique(d$batch))
if (missing(gammai)) {
gammai <- 0.4374901658/(seq_len(n_batch)^(1.6))
} else if (any(gammai < 0)) {
stop("All elements of gammai must be non-negative.")
} else if (sum(gammai) > 1) {
stop("The sum of the elements of gammai must not be greater than 1.")
}
### Start Batch BH procedure
R <- NULL
Rplus <- Rsum <- Rrsum <- alphai <- rep(0, n_batch)
alphai[1] <- gammai[1] * alpha
nt <- as.vector(table(d$batch))
batch_indices <- c(0, cumsum(nt))
pb <- progress::progress_bar$new(format = "  downloading [:bar] :percent eta: :eta",
total = n_batch, clear = FALSE, width= 60,
progress_enabled = display_progress)
for(i in seq_len(n_batch)){
pb$tick()
idx_b <- batch_indices[i]+1
idx_e <- batch_indices[i+1]
batch_pval <- .subset2(d, "pval")[idx_b:idx_e]
k <- nt[i]:1L
#sort pvals and then return the original indices of the sorted pvals
o <- order(batch_pval, decreasing = TRUE)
#sort the indices and then return the indices of the sorted indices
#effectively reverses the order
ro <- order(o)
out_R <- pmin(1, cummin(nt[i]/k * batch_pval[o]))[ro] <= alphai[i]
R <- c(R, out_R)
Rsum[i] <- sum(out_R)
#calculate Rsplus
aug_rej <- rep(0,nt[i])
for (j in seq_len(nt[i])) {
#run BH procedure with hallucinated p-value
hallucinated_pval <- batch_pval
hallucinated_pval[j] <- 0
oh <- order(hallucinated_pval, decreasing = TRUE)
roh <- order(oh)
hallucinated_R <- pmin(1, cummin(nt[i]/k * hallucinated_pval[oh]))[roh] <= alphai[i]
aug_rej[j] <- sum(hallucinated_R)
}
Rplus[i] = max(aug_rej)
#update alphai
if(i < n_batch) {
gammasum <- sum(gammai[seq_len(i+1)]) * alpha
Rrsum[1:i] = sum(Rsum)-Rsum[1:i]
alphai[i+1] <- (gammasum - sum(alphai[1:i]*(Rplus[1:i]/(Rplus[1:i] + Rrsum[1:i])))) *
((nt[i+1] + sum(Rsum))/nt[i+1])
}
}
out <- d
out$R <- as.numeric(R)
out$alphai <- rep(alphai, nt)
out
}
df <- read_csv("/Users/lathanliou/Downloads/IMPC_ProcessedData_Continuous.csv")
d <- df %>%
select(Experimental.Id, Sex.P.Val) %>%
rename(pval = Sex.P.Val,
batch = Experimental.Id)
BatchPRDS(d)
BatchPRDS(d, display_progress = TRUE)
BatchPRDS <- function(d, alpha = 0.05, gammai, display_progress = FALSE){
d <- checkPval(d)
if (!is.data.frame(d)) {
stop("d must be a dataframe")
} else if (!("batch" %in% colnames(d))) {
stop("d needs to have a column called batch")
}
if (alpha < 0 || alpha > 1) {
stop("alpha must be between 0 and 1.")
}
if(!is.numeric(d$batch)) {
stop("Check that your batch labels are numeric values.")
}
#check that batches were labeled correctly
if(is.unsorted(d$batch)) {
d <- d[order(d$batch),]
warning("Batches were re-ordered in increasing numeric value.")
}
n_batch <- length(unique(d$batch))
if (missing(gammai)) {
gammai <- 0.4374901658/(seq_len(n_batch)^(1.6))
} else if (any(gammai < 0)) {
stop("All elements of gammai must be non-negative.")
} else if (sum(gammai) > 1) {
stop("The sum of the elements of gammai must not be greater than 1.")
}
### Start Batch PRDS procedure
R <- NULL
alphai <- rep(0, n_batch)
alphai[1] <- gammai[1] * alpha
nt <- as.vector(table(d$batch))
batch_indices <- c(0, cumsum(nt))
pb <- progress::progress_bar$new(format = "  downloading [:bar] :percent eta: :eta",
total = n_batch, clear = FALSE, width = 60,
progress_enabled = display_progress)
for(i in seq_len(n_batch)){
pb$tick()
idx_b <- batch_indices[i]+1
idx_e <- batch_indices[i+1]
batch_pval <- .subset2(d, "pval")[idx_b:idx_e]
j <- nt[i]:1L
o <- order(batch_pval, decreasing = TRUE)
ro <- order(o)
out_R <- pmin(1, cummin(nt[i]/j * batch_pval[o]))[ro] <= alphai[i]
R <- c(R, out_R)
#update alphai
if(i < n_batch) {
alphai[i+1] <- alpha * (gammai[i+1]/nt[i+1]) * (nt[i+1] + sum(R))
}
}
out <- d
out$R <- as.numeric(R)
out$alphai <- rep(alphai, nt)
out
}
BatchPRDS(d, display_progress = TRUE)
checkPval <- function(d) {
if (is.data.frame(d)) {
if (any(is.na(d$pval))) {
warning("Your data contains missing p-values. Missing p-values were omitted.")
d <- stats::na.omit(d)
}
if (!(is.numeric(d$pval))) {
stop("The vector of p-values contain at least one non-numeric element.")
} else if (any(d$pval > 1 | d$pval < 0)) {
stop("All p-values must be between 0 and 1.")
}
} else if (is.vector(d)) {
if (any(is.na(d))) {
warning("Your data contains missing p-values. Missing p-values were omitted.")
d <- d[!is.na(d)]
}
if (!(is.numeric(d))) {
stop("The vector of p-values contain at least one non-numeric element.")
} else if (any(d > 1 | d < 0)) {
stop("All p-values must be between 0 and 1.")
}
}
return(d)
}
BatchPRDS(d, display_progress = TRUE)
BatchPRDS <- function(d, alpha = 0.05, gammai, display_progress = FALSE){
d <- checkPval(d)
if (!is.data.frame(d)) {
stop("d must be a dataframe")
} else if (!("batch" %in% colnames(d))) {
stop("d needs to have a column called batch")
}
if (alpha < 0 || alpha > 1) {
stop("alpha must be between 0 and 1.")
}
if(!is.numeric(d$batch)) {
stop("Check that your batch labels are numeric values.")
}
#check that batches were labeled correctly
if(is.unsorted(d$batch)) {
d <- d[order(d$batch),]
warning("Batches were re-ordered in increasing numeric value.")
}
n_batch <- length(unique(d$batch))
if (missing(gammai)) {
gammai <- 0.4374901658/(seq_len(n_batch)^(1.6))
} else if (any(gammai < 0)) {
stop("All elements of gammai must be non-negative.")
} else if (sum(gammai) > 1) {
stop("The sum of the elements of gammai must not be greater than 1.")
}
### Start Batch PRDS procedure
R <- NULL
alphai <- rep(0, n_batch)
alphai[1] <- gammai[1] * alpha
nt <- as.vector(table(d$batch))
batch_indices <- c(0, cumsum(nt))
if(display_progress) {
pb <- progress::progress_bar$new(format = "  downloading [:bar] :percent eta: :eta",
total = n_batch, clear = FALSE, width = 60)
for(i in seq_len(n_batch)){
pb$tick()
idx_b <- batch_indices[i]+1
idx_e <- batch_indices[i+1]
batch_pval <- .subset2(d, "pval")[idx_b:idx_e]
j <- nt[i]:1L
o <- order(batch_pval, decreasing = TRUE)
ro <- order(o)
out_R <- pmin(1, cummin(nt[i]/j * batch_pval[o]))[ro] <= alphai[i]
R <- c(R, out_R)
#update alphai
if(i < n_batch) {
alphai[i+1] <- alpha * (gammai[i+1]/nt[i+1]) * (nt[i+1] + sum(R))
}
}
out <- d
out$R <- as.numeric(R)
out$alphai <- rep(alphai, nt)
out
} else {
for(i in seq_len(n_batch)){
idx_b <- batch_indices[i]+1
idx_e <- batch_indices[i+1]
batch_pval <- .subset2(d, "pval")[idx_b:idx_e]
j <- nt[i]:1L
o <- order(batch_pval, decreasing = TRUE)
ro <- order(o)
out_R <- pmin(1, cummin(nt[i]/j * batch_pval[o]))[ro] <= alphai[i]
R <- c(R, out_R)
#update alphai
if(i < n_batch) {
alphai[i+1] <- alpha * (gammai[i+1]/nt[i+1]) * (nt[i+1] + sum(R))
}
}
out <- d
out$R <- as.numeric(R)
out$alphai <- rep(alphai, nt)
out
}
}
BatchPRDS(d, display_progress = TRUE)
BatchBH <- function(d, alpha = 0.05, gammai, display_progress = FALSE){
d <- checkPval(d)
if (!is.data.frame(d)) {
stop("d must be a dataframe")
} else if (!("batch" %in% colnames(d))) {
stop("d needs to have a column called batch")
}
if (alpha < 0 || alpha > 1) {
stop("alpha must be between 0 and 1.")
}
if(!is.numeric(d$batch)) {
stop("Check that your batch labels are numeric values.")
}
#check that batches were labeled correctly
if(is.unsorted(d$batch)) {
d <- d[order(d$batch),]
warning("Batches were re-ordered in increasing numeric value.")
}
n_batch <- length(unique(d$batch))
if (missing(gammai)) {
gammai <- 0.4374901658/(seq_len(n_batch)^(1.6))
} else if (any(gammai < 0)) {
stop("All elements of gammai must be non-negative.")
} else if (sum(gammai) > 1) {
stop("The sum of the elements of gammai must not be greater than 1.")
}
### Start Batch BH procedure
R <- NULL
Rplus <- Rsum <- Rrsum <- alphai <- rep(0, n_batch)
alphai[1] <- gammai[1] * alpha
nt <- as.vector(table(d$batch))
batch_indices <- c(0, cumsum(nt))
if(display_progress) {
pb <- progress::progress_bar$new(format = "  Computing [:bar] :percent eta: :eta",
total = n_batch, clear = FALSE, width= 60)
for(i in seq_len(n_batch)){
pb$tick()
idx_b <- batch_indices[i]+1
idx_e <- batch_indices[i+1]
batch_pval <- .subset2(d, "pval")[idx_b:idx_e]
k <- nt[i]:1L
#sort pvals and then return the original indices of the sorted pvals
o <- order(batch_pval, decreasing = TRUE)
#sort the indices and then return the indices of the sorted indices
#effectively reverses the order
ro <- order(o)
out_R <- pmin(1, cummin(nt[i]/k * batch_pval[o]))[ro] <= alphai[i]
R <- c(R, out_R)
Rsum[i] <- sum(out_R)
#calculate Rsplus
aug_rej <- rep(0,nt[i])
for (j in seq_len(nt[i])) {
#run BH procedure with hallucinated p-value
hallucinated_pval <- batch_pval
hallucinated_pval[j] <- 0
oh <- order(hallucinated_pval, decreasing = TRUE)
roh <- order(oh)
hallucinated_R <- pmin(1, cummin(nt[i]/k * hallucinated_pval[oh]))[roh] <= alphai[i]
aug_rej[j] <- sum(hallucinated_R)
}
Rplus[i] = max(aug_rej)
#update alphai
if(i < n_batch) {
gammasum <- sum(gammai[seq_len(i+1)]) * alpha
Rrsum[1:i] = sum(Rsum)-Rsum[1:i]
alphai[i+1] <- (gammasum - sum(alphai[1:i]*(Rplus[1:i]/(Rplus[1:i] + Rrsum[1:i])))) *
((nt[i+1] + sum(Rsum))/nt[i+1])
}
}
out <- d
out$R <- as.numeric(R)
out$alphai <- rep(alphai, nt)
out
} else {
for(i in seq_len(n_batch)){
idx_b <- batch_indices[i]+1
idx_e <- batch_indices[i+1]
batch_pval <- .subset2(d, "pval")[idx_b:idx_e]
k <- nt[i]:1L
#sort pvals and then return the original indices of the sorted pvals
o <- order(batch_pval, decreasing = TRUE)
#sort the indices and then return the indices of the sorted indices
#effectively reverses the order
ro <- order(o)
out_R <- pmin(1, cummin(nt[i]/k * batch_pval[o]))[ro] <= alphai[i]
R <- c(R, out_R)
Rsum[i] <- sum(out_R)
#calculate Rsplus
aug_rej <- rep(0,nt[i])
for (j in seq_len(nt[i])) {
#run BH procedure with hallucinated p-value
hallucinated_pval <- batch_pval
hallucinated_pval[j] <- 0
oh <- order(hallucinated_pval, decreasing = TRUE)
roh <- order(oh)
hallucinated_R <- pmin(1, cummin(nt[i]/k * hallucinated_pval[oh]))[roh] <= alphai[i]
aug_rej[j] <- sum(hallucinated_R)
}
Rplus[i] = max(aug_rej)
#update alphai
if(i < n_batch) {
gammasum <- sum(gammai[seq_len(i+1)]) * alpha
Rrsum[1:i] = sum(Rsum)-Rsum[1:i]
alphai[i+1] <- (gammasum - sum(alphai[1:i]*(Rplus[1:i]/(Rplus[1:i] + Rrsum[1:i])))) *
((nt[i+1] + sum(Rsum))/nt[i+1])
}
}
out <- d
out$R <- as.numeric(R)
out$alphai <- rep(alphai, nt)
out
}
}
BatchPRDS(d, display_progress = TRUE)
BatchBH(d, display_progress = TRUE)
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFWER")
renv::snapshot()
?ADDIS_spending
?Alpha_spending
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny")
runApp()
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFWER')
renv::snapshot()
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFWER")
renv::snapshot()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
runApp()
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
setBound("LOND", N = 0)
setBound("LOND")
setBound("LOND", 1)
setBound("LOND", N = 1)
setBound("LOND", alpha = 0.05, N = 1)
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
shiny::runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
setBound("LOND", 0)
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
shiny::runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
setBound("LOND", -1)
setBound("LOND", N = -1)
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
?switchInput
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
?textInput
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
setBound("LOND", N = 10)
LOND(sample.df)
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/data/sample.csv")
sample <- read_csv("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/data/sample.csv")
LOND(sample, betai = setBound("LOND", N = 10))
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
!FALSE
if(!FALSE)
if(TRUE){
print("bob")
} else {
print("joe")
}
if(FALSE){
print("bob")
} else {
print("joe")
}
runApp('~/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
LOND(sample, original = FALSE)
sample <- read_csv("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/data/sample.csv")
LOND(sample, original = FALSE)
LOND(sample, original = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?LORD
?SAFFRON
?ADDIS
?Alpha_investing
shiny::runApp()
?ADDIS_spending
?Alpha_spending
?ADDIS_spending
?Alpha_spending
?online_fallback
runApp()
shiny::runApp()
shiny::runApp()
sample <- read_csv("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/data/sample.csv")
LOND(sample, betai = setBound("LOND", N = 16))$alphai
LOND(sample, betai = setBound("LOND", N = 16))$R
runApp()
LOND(sample, betai = setBound("LOND", N = 100))$alphai
setBound("LOND", N = 100)
sample <- read_csv("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/data/sample.csv")
LOND(sample, betai = setBound("LOND", N = 100))$alphai
LOND(sample, betai = setBound("LOND", N = 1000))$alphai
TRUE & FALSE
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?isolate
shiny::runApp()
shiny::runApp()
mtcars %>% slice(50)
shiny::runApp()
shiny::runApp()
