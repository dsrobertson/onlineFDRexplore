# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(lubridate)
#make sure github dev version is installed
library(onlineFDR)
source("ui.R")
source("ui.R")
source("ui.R")
source("ui.R")
source("ui.R")
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
.onLoad <- function(libname, pkgname) {
shiny::addResourcePath(
prefix = "assets",
directoryPath = system.file(
"assets",
package = "onlineFDR"
)
)
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
.onLoad <- function(libname, pkgname) {
shiny::addResourcePath(
prefix = "assets",
directoryPath = system.file(
"assets",
package = "onlineFDR"
)
)
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
#render user diagram
src = "https://github.com/latlio/onlineFDRexplore/blob/master/www/user-diagram.png"
src
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
renv::init()
version
2 + 3
a <- 2
3*0
hist(1:10)
seun
seun <- 23
seun
print(seun)
seun <- 24
seun
lathan <- 24
seun <- 23
seun
lathan <- 24
seun <- lathan
lathan <- "is awesome"
lathan
#vector
c(1,2,3)
#vector
x <- c(1,2,3)
x[100]
identical(2, 4/2)
x <- 10
if(x < 5) {
print("hello lathan")
} else {
print("fuk u lathan")
}
print("a")
print("fuk u lathan")
if (x < 5)
print("hello lathan")
else
print("fuk u lathan")
if (x < 5)
print("hello lathan")
if (x < 5) {
print("hello lathan")
}
x <- 10
if(x < 5) {
lathan <- "beast"
}
rm(lathnan)
rm(lathan)
lathan
x <- 1
if(x < 5) {
lathan <- "beast"
}
lathan
x <- 6
if(x < 5) {
lathan <- "beast"
}
lathan
rm(lathan)
x <- 6
if(x < 5) {
lathan <- "beast"
}
lathan
if(x < 5) {
print("hello world")
} else {
print("bye world")
}
z <- c("")
z <- c("", NA)
z <- c("", NA, NULL)
#### DATA SCIENCE! ####
mtcars
View(mtcars)
mtcars$mpg[row.names(mtcars) == "Mazda RX4"]
row.names(mtcars)
row.names(mtcars) == "Mazda RX4"
row.names(mtcars) = "Mazda RX4"
mtcars$mpg[row.names(mtcars) == "mazda RX4"]
mtcars$mpg[row.names(mtcars) == "Mazda RX4"]
row.names(iris)
mean(mtcars$mpg)
sd(mtcars$mpg)
hist(mtcars$mpg)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(lubridate)
#make sure github dev version is installed
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
View(demodata)
?LORD
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
?mutate
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?reactive
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?renderPlotly
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
dplyr::rename()
?dplyr::rename
mtcars %>%
mutate('LORD' = row.number())
mtcars %>%
mutate(LORD = row.number())
mtcars %>%
mutate('LORD' = rep(1, nrow()))
mtcars %>%
mutate('LORD' = rep(1, nrow(.)))
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp()
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
tagList(
br(),
p("Make sure you already clicked Calculate. This feature compares the results of two algorithms. Parameters for the selected algorithm are assumed to be same as those for the current algorithm, otherwise they are set to the default values (see Code)."),
column(width = 12,
align = "center",
div(style = "display: inline-block;vertical-align:top;text-align:center",
strong("Pick an algorithm for comparison"),
shiny::selectInput(ns("alg"), NULL, c("LOND", "LORD2", "LORD3", "LORDdiscard", "LORDdep", "SAFFRON", "ADDIS")))),
shinyWidgets::actionBttn(
inputId = ns("compare"),
label = "Compare",
style = "fill",
color = "primary"
),
br(),
plotlyOutput(ns("comp")) %>%
shinycssloaders::withSpinner(type = 6,
color = "#0066CC")
) #close taglist
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='lathanliou', token='965F860076BF0D0211834721631B7586', secret='5BMVYIMrvXKm24bsajJl/s27jIHqJFS9Qpe0ICYx')
deployApp()
deployApp()
deployApp("onlineFDR",
appName = "onlineFDR",
account = "lathanliou")
deployApp("onlineFDRShiny",
appName = "onlineFDR",
account = "lathanliou")
?deployApp
deployApp(appName = "onlineFDR",
account = "lathanliou")
#make sure github dev version is installed
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
deployApp(appName = "onlineFDR",
account = "lathanliou")
rsconnect::tasks()
rsconnect::tasks(account = "lathanliou")
rsconnect::taskLog(account = "lathanliou")
rsconnect::taskLog(taskId = 820836805, account = "lathanliou")
rsconnect::taskLog(taskId = 820834434, account = "lathanliou")
rsconnect::taskLog(taskId = 820834432, account = "lathanliou")
rsconnect::taskLog(taskId = 820836787, account = "lathanliou")
rsconnect::appDependencies(account = "lathanliou")
rsconnect::appDependencies()
rsconnect::appDependencies()
deployApp(appName = "onlineFDR",
account = "lathanliou")
install.packages("Stanheaders")
install.packages("StanHeaders")
devtools::clean_dll()
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR")
devtools::clean_dll()
?clean_dll
renv::status()
renv::snapshot()
#make sure github dev version is installed
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::appDependencies()
devtools::session_info()
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
df <- read_delim("/Users/lathanliou/Downloads/PGS000018 (1).txt")
library(tidyverse)
df <- read_delim("/Users/lathanliou/Downloads/PGS000018 (1).txt")
df <- read_delim("/Users/lathanliou/Downloads/PGS000018 (1).txt", delim = '\t')
df <- read_csv("/Users/lathanliou/Downloads/PGS000018 (1).txt", skip = 9)
df <- read_csv("/Users/lathanliou/Downloads/PGS000018 (1).txt", delim = "\t", skip = 9)
df <- read_delim("~/Downloads/PGS000018 (1).txt",
"\t", escape_double = FALSE, trim_ws = TRUE,
skip = 9)
write_csv(df, "/Users/lathanliou/Desktop/Academic/Cambridge/Thesis/BreastCancerResearch/metaGRS/metaGRS-SNPs.csv")
rsconnect::showLogs()
rsconnect::showLogs()
utils:::.getHelpFile
?utils:::.getHelpFile
utils:::.getHelpFile
tools:::fetchRdDB
rsconnect:::systemInfo()
devtools::install_github("https://github.com/rstudio/rmarkdown")
?help
utils:::.getHelpFile()
utils:::.getHelpFile
?dirname
