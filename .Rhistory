source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
dplyr::rename()
?dplyr::rename
mtcars %>%
mutate('LORD' = row.number())
mtcars %>%
mutate(LORD = row.number())
mtcars %>%
mutate('LORD' = rep(1, nrow()))
mtcars %>%
mutate('LORD' = rep(1, nrow(.)))
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp()
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
tagList(
br(),
p("Make sure you already clicked Calculate. This feature compares the results of two algorithms. Parameters for the selected algorithm are assumed to be same as those for the current algorithm, otherwise they are set to the default values (see Code)."),
column(width = 12,
align = "center",
div(style = "display: inline-block;vertical-align:top;text-align:center",
strong("Pick an algorithm for comparison"),
shiny::selectInput(ns("alg"), NULL, c("LOND", "LORD2", "LORD3", "LORDdiscard", "LORDdep", "SAFFRON", "ADDIS")))),
shinyWidgets::actionBttn(
inputId = ns("compare"),
label = "Compare",
style = "fill",
color = "primary"
),
br(),
plotlyOutput(ns("comp")) %>%
shinycssloaders::withSpinner(type = 6,
color = "#0066CC")
) #close taglist
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='lathanliou', token='965F860076BF0D0211834721631B7586', secret='5BMVYIMrvXKm24bsajJl/s27jIHqJFS9Qpe0ICYx')
deployApp()
deployApp()
deployApp("onlineFDR",
appName = "onlineFDR",
account = "lathanliou")
deployApp("onlineFDRShiny",
appName = "onlineFDR",
account = "lathanliou")
?deployApp
deployApp(appName = "onlineFDR",
account = "lathanliou")
#make sure github dev version is installed
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
deployApp(appName = "onlineFDR",
account = "lathanliou")
rsconnect::tasks()
rsconnect::tasks(account = "lathanliou")
rsconnect::taskLog(account = "lathanliou")
rsconnect::taskLog(taskId = 820836805, account = "lathanliou")
rsconnect::taskLog(taskId = 820834434, account = "lathanliou")
rsconnect::taskLog(taskId = 820834432, account = "lathanliou")
rsconnect::taskLog(taskId = 820836787, account = "lathanliou")
rsconnect::appDependencies(account = "lathanliou")
rsconnect::appDependencies()
rsconnect::appDependencies()
deployApp(appName = "onlineFDR",
account = "lathanliou")
install.packages("Stanheaders")
install.packages("StanHeaders")
devtools::clean_dll()
setwd("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDR")
devtools::clean_dll()
?clean_dll
renv::status()
renv::snapshot()
#make sure github dev version is installed
devtools::install_github("https://github.com/dsrobertson/onlineFDR")
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::appDependencies()
devtools::session_info()
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
df <- read_delim("/Users/lathanliou/Downloads/PGS000018 (1).txt")
library(tidyverse)
df <- read_delim("/Users/lathanliou/Downloads/PGS000018 (1).txt")
df <- read_delim("/Users/lathanliou/Downloads/PGS000018 (1).txt", delim = '\t')
df <- read_csv("/Users/lathanliou/Downloads/PGS000018 (1).txt", skip = 9)
df <- read_csv("/Users/lathanliou/Downloads/PGS000018 (1).txt", delim = "\t", skip = 9)
df <- read_delim("~/Downloads/PGS000018 (1).txt",
"\t", escape_double = FALSE, trim_ws = TRUE,
skip = 9)
write_csv(df, "/Users/lathanliou/Desktop/Academic/Cambridge/Thesis/BreastCancerResearch/metaGRS/metaGRS-SNPs.csv")
rsconnect::showLogs()
rsconnect::showLogs()
utils:::.getHelpFile
?utils:::.getHelpFile
utils:::.getHelpFile
tools:::fetchRdDB
rsconnect:::systemInfo()
devtools::install_github("https://github.com/rstudio/rmarkdown")
?help
utils:::.getHelpFile()
utils:::.getHelpFile
?dirname
source("ui.R")
source("server.R")
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
runApp(shinyApp(ui, server), launch.browser = TRUE)
?shinyUI
?dropdownItem
?img
?htmltools::img
htmltools::iomg
htmltools::img
?across
rsconnect::setAccountInfo(name='mrc-bsu', token='965F860076BF0D0211834721631B7586', secret='5BMVYIMrvXKm24bsajJl/s27jIHqJFS9Qpe0ICYx')
?need
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
tagList(
useShinyFeedback(),
useShinyjs(),
div(style = "display: inline-block;vertical-align:top; width: 200px;",
strong("Alpha:"),
shiny::textInput(ns("alpha"),
NULL,
width = 80, value = 0.05, placeholder = ".05")),
shinyBS::bsTooltip(ns("alpha"),
"Overall significance level of the FDR procedure",
placement = "right",
trigger = "hover"),
shiny::textInput(ns("w0"), "Wealth:", width = 80, value = 0.00625,
placeholder = ".00625"),
shinyBS::bsTooltip(ns("w0"),
"Initial wealth of the procedure",
placement = "right",
trigger = "hover"),
shiny::textInput(ns("lambda"), "Lambda", width = 80, value = 0.5, placeholder = ".5"),
shinyBS::bsTooltip(ns("lambda"),
"Optional threshold for a candidate hypothesis",
placement = "right",
trigger = "hover"),
shiny::textInput(ns("tau"), "Threshold:", width = 80,
value = 0.5, placeholder = ".5"),
shinyBS::bsTooltip(ns("tau"),
"Optional threshold for hypotheses to be selected for testing",
placement = "right",
trigger = "hover"),
# div(style="display: inline-block;vertical-align:top; width: 200px;",
#     tags$strong(id = "label_asyncADDIS",
#                 "Asynchronous:"),
#     shinyWidgets::switchInput("asyncADDIS",
#                               NULL,
#                               value = FALSE,
#                               onLabel = "True",
#                               offLabel = "False",
#                               width = "80px")),
# shinyBS::bsTooltip("label_asyncADDIS",
#                    "Runs the version for an asynchronous testing process",
#                    placement = "right",
#                    trigger = "hover"),
shiny::textInput(ns("seed"),
"Seed:",
width = 80, value = 1),
shinyBS::bsTooltip(ns("seed"),
"Remember your number as this will let you access the same results in the future.",
placement = "right",
trigger = "hover"),
shinyWidgets::actionBttn(
inputId = ns("go"),
label = "Calculate",
style = "fill",
color = "success"
),
br(),
br(),
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
),
br(),
br(),
shinyWidgets::downloadBttn(
outputId = ns("download2"),
label = "Download inputs",
style = "fill",
color = "primary",
size = "sm"
)
)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?arrange
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?toggle
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp()
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
?downloadBttn
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
downloadBttn()
downloadBttn
dropdownButton
downloadBttn
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
downloadBttn()
downloadBttn
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
