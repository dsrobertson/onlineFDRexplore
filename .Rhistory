style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(mtcars, file)
}
)
}
ui <- fluidPage(
tagList(
useShinyjs(),
navbarPage(
tabPanel("reprex"),
navbarMenu(
"menuitem",
tabPanel("tab",
fluidRow(
column(4,
click_to_show_UI("test"))),
column(8)
) #close fluidrow
) #close tabPanel
) #close navbarMenu
) #close navbarPage
) #close tagList
library(shiny)
library(shinyjs)
#Modules
click_to_show_UI <- function(id) {
ns <- NS(id)
tagList(
actionButton(ns("btn"), "Show download button"),
shinyjs::hidden(
div(
id = ns("downloadbutton"),
uiOutput(ns("count"))
) #close div
)
)
}
test <- function(input, output, session) {
observeEvent(input$go, {
toggle(id = "downloadbutton")
})
output$count <- renderUI({
shinyWidgets::downloadBttn(
outputId = "download",
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(mtcars, file)
}
)
}
ui <- fluidPage(
tagList(
useShinyjs(),
navbarPage(
tabPanel("reprex"),
navbarMenu(
"menuitem",
tabPanel("tab",
fluidRow(
column(4,
click_to_show_UI("test")),
column(8)
) #close fluidrow
) #close tabPanel
) #close navbarMenu
) #close navbarPage
) #close tagList
) # close fluidPage
server <- function(input, output, session) {
callModule(serverMod, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
library(shiny)
library(shinyjs)
#Modules
click_to_show_UI <- function(id) {
ns <- NS(id)
tagList(
actionButton(ns("btn"), "Show download button"),
shinyjs::hidden(
div(
id = ns("downloadbutton"),
uiOutput(ns("count"))
) #close div
)
)
}
test <- function(input, output, session) {
observeEvent(input$go, {
toggle(id = "downloadbutton")
})
output$count <- renderUI({
shinyWidgets::downloadBttn(
outputId = "download",
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(mtcars, file)
}
)
}
ui <- fluidPage(
useShinyjs(),
click_to_show_UI("test")
) # close fluidPage
server <- function(input, output, session) {
callModule(test, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
library(shiny)
library(shinyjs)
#Modules
click_to_show_UI <- function(id) {
ns <- NS(id)
tagList(
actionButton(ns("btn"), "Show download button"),
div(
id = ns("downloadbutton"),
uiOutput(ns("count"))
) #close div
)
}
test <- function(input, output, session) {
observeEvent(input$go, {
toggle(id = "downloadbutton")
})
output$count <- renderUI({
shinyWidgets::downloadBttn(
outputId = "download",
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(mtcars, file)
}
)
}
ui <- fluidPage(
useShinyjs(),
click_to_show_UI("test")
) # close fluidPage
server <- function(input, output, session) {
callModule(test, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
library(shiny)
library(shinyjs)
#Modules
click_to_show_UI <- function(id) {
ns <- NS(id)
tagList(
actionButton(ns("btn"), "Show download button"),
div(
id = ns("downloadbutton"),
uiOutput(ns("count"))
) #close div
)
}
test <- function(input, output, session) {
observeEvent(input$go, {
toggle(id = "downloadbutton")
})
output$count <- renderUI({
shinyWidgets::downloadBttn(
outputId = "download",
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(mtcars, file)
}
)
}
ui <- fluidPage(
useShinyjs(),
click_to_show_UI("test")
) # close fluidPage
server <- function(input, output, session) {
callModule(test, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
library(shiny)
library(shinyjs)
#Modules
click_to_show_UI <- function(id) {
ns <- NS(id)
tagList(
actionButton(ns("btn"), "Show download button"),
div(
id = ns("downloadbutton"),
uiOutput(ns("count"))
) #close div
)
}
test <- function(input, output, session) {
ns <- session$ns
observeEvent(input$go, {
toggle(id = "downloadbutton")
})
output$count <- renderUI({
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(mtcars, file)
}
)
}
ui <- fluidPage(
useShinyjs(),
click_to_show_UI("test")
) # close fluidPage
server <- function(input, output, session) {
callModule(test, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
library(shiny)
library(shinyjs)
#Modules
click_to_show_UI <- function(id) {
ns <- NS(id)
tagList(
actionButton(ns("btn"), "Show download button"),
div(
id = ns("downloadbutton"),
uiOutput(ns("count"))
) #close div
)
}
test <- function(input, output, session) {
ns <- session$ns
observeEvent(input$go, {
toggle(id = "downloadbutton")
})
output$count <- renderUI({
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(mtcars, file)
}
)
}
ui <- fluidPage(
useShinyjs(),
click_to_show_UI("test")
) # close fluidPage
server <- function(input, output, session) {
callModule(test, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
library(shiny)
library(shinyjs)
#Modules
click_to_show_UI <- function(id) {
ns <- NS(id)
tagList(
actionButton(ns("btn"), "Show download button"),
div(
id = ns("downloadbutton"),
uiOutput(ns("count"))
) #close div
)
}
test <- function(input, output, session) {
ns <- session$ns
observeEvent(input$go, {
toggle(id = "downloadbutton")
})
output$count <- renderUI({
shinyWidgets::downloadBttn(
outputId = ns("download"),
label = "Download results",
style = "fill",
color = "primary",
size = "sm"
)
})
output$download <- downloadHandler(
filename = function() {
paste("test-", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(mtcars, file)
}
)
}
ui <- fluidPage(
useShinyjs(),
click_to_show_UI("test")
) # close fluidPage
server <- function(input, output, session) {
callModule(test, "test")
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
# 1. Shiny ----
library(shiny)
library(shinyWidgets) #custom widgets, allows for shinydashboard elements
library(shinycssloaders) #custom loading icons
library(shinyjs) #improved user exp
library(shinyBS) #custom widgets
library(bsplus)
# library(shinyalert)
library(shinyFeedback) #for user feedback messages
library(tippy) #for hovers
# library(highcharter) #for animated plots
library(plotly)
library(waiter) #for loading screen
library(sever) #for waiting screen
library(knitr)
library(shinydashboard)
library(shinydashboardPlus)
# 2. Data Manipulation
library(tidyverse)
library(dplyr)
library(lubridate)
#make sure github dev version is installed
# devtools::install_github("https://github.com/dsrobertson/onlineFDR")
library(StanHeaders)
library(onlineFDR)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
current_alg_data <- LONDresult$LONDres()
data_to_plot <- eventReactive(input$compare, {
current_alg_data <- LONDresult$LONDres()
select_alg_rx <- reactive({
out <- select_alg(alg = input$alg, data = data())
})
select_alg_data <- select_alg_rx()
data_to_plot <- cbind(current_alg_data, select_alg_data$alphai) %>%
mutate(index = row_number(),
LOND = log(alphai),
!!rlang::quo_name(input$alg) := log(select_alg_data$alphai),
Bonferroni = log(0.05/index),
Unadjusted = rep(log(0.05), nrow(.))) %>%
pivot_longer(cols = c(LOND, !!rlang::quo_name(input$alg), Bonferroni, Unadjusted),
names_to = "adjustment",
values_to = "alpha")
})
current_alg_data <- LONDresult$LONDres()
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("ui.R")
?knit
?markdown::markdownToHTML
library(markdown)
knit("src/LOND_code.Rmd")
knit("/src/LOND_code.Rmd")
knit("LOND_code.Rmd")
knit("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_page.R")
knit("./src/LOND_page.R")
markdown::markdownToHTML(knit("./src/LOND_code.Rmd"))
knit("./src/LOND_page.R")
markdown::markdownToHTML(knit("./src/LOND_code.Rmd"))
library(rmarkdown)
source("ui.R")
rmardown::render("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
rmarkdown::render("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
rmarkdown::render("/Users/lathanliou/Desktop/Academic/Cambridge/BSU-job/onlineFDRShiny/src/LOND_code.Rmd")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
renv::snapshot()
source("ui.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
source("ui.R")
source("server.R")
source("ui.R")
source("server.R")
runApp(shinyApp(ui, server), launch.browser = TRUE)
